#!/opt/elasticbeanstalk/lib/ruby/bin/ruby

#==============================================================================
# Copyright 2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Amazon Software License (the "License"). You may not use
# this file except in compliance with the License. A copy of the License is
# located at
#
#       https://aws.amazon.com/asl/
#
# or in the "license" file accompanying this file. This file is distributed on
# an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
# implied. See the License for the specific language governing permissions
# and limitations under the License.
#==============================================================================

require 'optparse'
require 'ostruct'
require 'elasticbeanstalk/command-processor'
require 'elasticbeanstalk/exceptions'
require 'elasticbeanstalk/command-data'
require 'elasticbeanstalk/cfn-command-reporter'

include ElasticBeanstalk

File.umask(022)

options = OpenStruct.new
options.error_exit = false

opts = OptionParser.new do |opts|
    opts.on("-e", "--error_exit", "Exit with error code 1 when Command fails.") do |error_exit|
        options.error_exit = true
    end
end

begin
    opts.parse!
    cmd_data_str = ENV['CMD_DATA']
    raise BeanstalkRuntimeError, %[CMD_DATA not provided!] unless cmd_data_str

    cmd_data = CommandData.new(cmd_data_str, cfn_command_name: ENV['CMD_NAME'],
                               invocation_id: ENV['INVOCATION_ID'],
                               dispatcher_id: ENV['DISPATCHER_ID'])
    cmd_result = CommandProcessor.new.execute!(cmd_data)
    print CfnCommandReporter.report(cmd_result)
    if options.error_exit && cmd_result.status != 'SUCCESS'
        exit 1
    end
rescue Exception => e
    # Log final words before die
    begin
        processor_logger = CommandProcessor.logger
        processor_logger.close unless processor_logger.nil?
    rescue NameError
        # just skip if @@logger not being defined yet
    end
    logger = Logger.new(CommandProcessor.log_file)
    logger.error(e)
    raise e
end
